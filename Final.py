# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Finalpy.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib
import random
import glob
import cv2
import numpy as np
from tensorflow.keras.models import load_model
import os.path


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel, QFileDialog
from PyQt5.QtGui import QPixmap
import matplotlib.pyplot as plt
IMG_HEIGHT, IMG_WIDTH = 256, 256


class Ui_MainWindow(object):


    def load_mri_model(self):
        return load_model('./Unet_Model.hdf5', compile = False)


    def segment_tumor_MRI(self,ImagePath):

        img=cv2.imread( ImagePath)
        
    #     img = cv2.imread(test['filename'].iloc[12])
        img   = cv2.resize(img ,(IMG_HEIGHT, IMG_WIDTH))
        img   = img / 255
        img   = img[np.newaxis, :, :, :]

        model = self.load_mri_model()
        pred  = model.predict(img)

        plt.figure(figsize = (12 ,12))
        
        plt.subplot(1, 2 ,1) 
        plt.imshow(np.squeeze(img))
        plt.title('Original Image')
        
        
        plt.subplot(1, 2, 2)
        plt.imshow(np.squeeze(pred) > 0.5, interpolation = "nearest", cmap = "viridis")
        plt.title('Prediction Image')
        plt.show()


    def upload(self):
        fullPath = QFileDialog.getOpenFileName()
        # fname = QFileDialog.getOpenFileName(self, "Open File", "./test_images/", "All Files (*)")
        # object name is stored in pixmap1
        self.pixmap1=QPixmap(fullPath[0]) 
        # open image
        self.pixmap.setPixmap(self.pixmap1)
        # self.show()
        self.Imagepath=fullPath[0]
        self.FilePath.setText(self.Imagepath)

        TS=fullPath[0].split("/")
        Mask_array=TS[-1].split(".")
        Maskname=Mask_array[0]+"_mask."+Mask_array[1]
        MaskPath="/".join(TS[:-1])
        MaskPath=MaskPath+"/"+Maskname
        print(MaskPath)
        file_exists = os.path.exists(MaskPath)

        if(file_exists):
           #set the mask if the file is available
            Mask_image=QPixmap(MaskPath) 
            self.Mask.setPixmap(Mask_image)
        else:

            #No mask orginal mask found 
            self.Mask.setText("No orginal mask found to compare")





    def submit(self):
  
        # # open image
        self.segment_tumor_MRI(self.Imagepath)
        
    





    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(945, 608)
        MainWindow.setMouseTracking(False)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget,clicked=lambda: self.upload())
        self.pushButton.setGeometry(QtCore.QRect(250, 300, 431, 81))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda: self.submit())
        self.pushButton_2.setGeometry(QtCore.QRect(250, 420, 431, 81))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pixmap = QtWidgets.QLabel(self.centralwidget)
        self.pixmap.setGeometry(QtCore.QRect(210, 30, 321, 221))
        self.pixmap.setAlignment(QtCore.Qt.AlignCenter)
        self.pixmap.setObjectName("pixmap")
        self.FilePath = QtWidgets.QLabel(self.centralwidget)
        self.FilePath.setGeometry(QtCore.QRect(220, 560, 721, 16))
        self.FilePath.setObjectName("FilePath")
        self.labelFile = QtWidgets.QLabel(self.centralwidget)
        self.labelFile.setGeometry(QtCore.QRect(0, 560, 60, 16))
        self.labelFile.setObjectName("labelFile")
        self.Mask = QtWidgets.QLabel(self.centralwidget)
        self.Mask.setGeometry(QtCore.QRect(590, 30, 321, 221))
        self.Mask.setAlignment(QtCore.Qt.AlignCenter)
        self.Mask.setObjectName("Mask")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MRI segementation using UNET"))
        self.pushButton.setText(_translate("MainWindow", "Upload"))
        self.pushButton_2.setText(_translate("MainWindow", "Submit"))
        self.pixmap.setText(_translate("MainWindow", "Image"))
        self.FilePath.setText(_translate("MainWindow", "None"))
        self.labelFile.setText(_translate("MainWindow", "FilePath"))
        self.Mask.setText(_translate("MainWindow", "Mask"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())